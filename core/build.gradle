plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdk 35
    namespace 'com.google.ar.sceneform'
    defaultConfig {
        minSdk = 24
        targetSdk = 35
        consumerProguardFiles 'lib-proguard-rules.pro'
        buildConfigField 'String', 'VERSION_NAME', "\"${project.properties['VERSION_NAME']}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    androidResources {
        noCompress 'filamat', 'ktx'
    }
    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    // This is the key part: let AGP know to publish the "release" variant
    // AND automatically generate sources + javadoc jars.
    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    // Your dependencies here
    implementation files("libs/libsceneform_runtime_schemas.jar")

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.1.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.9.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.9.0"

    // Filament
    api "com.google.android.filament:filament-android:1.21.1"
    api "com.google.android.filament:gltfio-android:1.21.1"
    api "com.google.android.filament:filament-utils-android:1.21.1"

    // ARCore
    api "com.google.ar:core:1.48.0"

    // AndroidX
    implementation "androidx.annotation:annotation:1.9.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.8.7"

    // Fuel
    implementation "com.github.kittinunf.fuel:fuel:2.3.1"
    implementation "com.github.kittinunf.fuel:fuel-android:2.3.1"
    implementation "com.github.kittinunf.fuel:fuel-coroutines:2.3.1"
}

publishing {
    publications {
        create("release", MavenPublication) {
            groupId = 'com.lascade'
            artifactId = 'sceneform'
            version = '1.0'

            // Tells Gradle to include the AAR, sources.jar, and javadoc.jar
            // generated by the "release" variant
            afterEvaluate {
                from(components["release"])
            }

            // POM information required by Maven Central
            pom {
                name.set("Sceneform")
                description.set("A dfork of Google Sceneform.")
                url.set("https://github.com/Lascade-Co/sceneform")

                licenses {
                    license {
                        name.set("Apache-2.0 License")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0")
                    }
                }

                developers {
                    developer {
                        id.set("rohit")
                        name.set("Rohit T P")
                        email.set("rohit@lascade.com")
                    }
                }

                scm {
                    connection.set("scm:git:git://github.com/Lascade-Co/sceneform.git")
                    developerConnection.set("scm:git:ssh://github.com:Lascade-Co/sceneform.git")
                    url.set("https://github.com/Lascade-Co/sceneform")
                }
            }
        }
    }

    // For local publishing/testing:
    repositories {
        maven {
            name = 'myrepo'
            url = layout.buildDirectory.dir("repo")
        }
        // For Maven Central (Sonatype), configure snapshot/staging URLs and credentials:
        // maven {
        //     name = "sonatype"
        //     url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
        //     credentials {
        //         username = project.findProperty("ossrhUsername") ?: ""
        //         password = project.findProperty("ossrhPassword") ?: ""
        //     }
        // }
    }
}

// Signing plugin setup, which signs all artifacts (AAR, POM, sources.jar, javadoc.jar)
signing {
    useInMemoryPgpKeys(project.properties["PUBLISH_KEY"], project.properties["PUBLISH_KEY_PASSPHRASE"])
    sign(publishing.publications["release"])
}

